/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/followers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.followers.id"];
          created_at?: parameters["rowFilter.followers.created_at"];
          user?: parameters["rowFilter.followers.user"];
          actor?: parameters["rowFilter.followers.actor"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["followers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** followers */
          followers?: definitions["followers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.followers.id"];
          created_at?: parameters["rowFilter.followers.created_at"];
          user?: parameters["rowFilter.followers.user"];
          actor?: parameters["rowFilter.followers.actor"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.followers.id"];
          created_at?: parameters["rowFilter.followers.created_at"];
          user?: parameters["rowFilter.followers.user"];
          actor?: parameters["rowFilter.followers.actor"];
        };
        body: {
          /** followers */
          followers?: definitions["followers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/get_messages_room": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.get_messages_room.id"];
          created_at?: parameters["rowFilter.get_messages_room.created_at"];
          text?: parameters["rowFilter.get_messages_room.text"];
          seen?: parameters["rowFilter.get_messages_room.seen"];
          user?: parameters["rowFilter.get_messages_room.user"];
          receiver?: parameters["rowFilter.get_messages_room.receiver"];
          room?: parameters["rowFilter.get_messages_room.room"];
          group_message?: parameters["rowFilter.get_messages_room.group_message"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["get_messages_room"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/pool": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pool.id"];
          created_at?: parameters["rowFilter.pool.created_at"];
          user?: parameters["rowFilter.pool.user"];
          paired_with?: parameters["rowFilter.pool.paired_with"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pool"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pool */
          pool?: definitions["pool"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pool.id"];
          created_at?: parameters["rowFilter.pool.created_at"];
          user?: parameters["rowFilter.pool.user"];
          paired_with?: parameters["rowFilter.pool.paired_with"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.pool.id"];
          created_at?: parameters["rowFilter.pool.created_at"];
          user?: parameters["rowFilter.pool.user"];
          paired_with?: parameters["rowFilter.pool.paired_with"];
        };
        body: {
          /** pool */
          pool?: definitions["pool"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/messages": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          created_at?: parameters["rowFilter.messages.created_at"];
          text?: parameters["rowFilter.messages.text"];
          seen?: parameters["rowFilter.messages.seen"];
          user?: parameters["rowFilter.messages.user"];
          receiver?: parameters["rowFilter.messages.receiver"];
          room?: parameters["rowFilter.messages.room"];
          group_message?: parameters["rowFilter.messages.group_message"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["messages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** messages */
          messages?: definitions["messages"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          created_at?: parameters["rowFilter.messages.created_at"];
          text?: parameters["rowFilter.messages.text"];
          seen?: parameters["rowFilter.messages.seen"];
          user?: parameters["rowFilter.messages.user"];
          receiver?: parameters["rowFilter.messages.receiver"];
          room?: parameters["rowFilter.messages.room"];
          group_message?: parameters["rowFilter.messages.group_message"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          created_at?: parameters["rowFilter.messages.created_at"];
          text?: parameters["rowFilter.messages.text"];
          seen?: parameters["rowFilter.messages.seen"];
          user?: parameters["rowFilter.messages.user"];
          receiver?: parameters["rowFilter.messages.receiver"];
          room?: parameters["rowFilter.messages.room"];
          group_message?: parameters["rowFilter.messages.group_message"];
        };
        body: {
          /** messages */
          messages?: definitions["messages"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/fcm_token": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.fcm_token.id"];
          user?: parameters["rowFilter.fcm_token.user"];
          fcm_token?: parameters["rowFilter.fcm_token.fcm_token"];
          created_at?: parameters["rowFilter.fcm_token.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["fcm_token"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** fcm_token */
          fcm_token?: definitions["fcm_token"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.fcm_token.id"];
          user?: parameters["rowFilter.fcm_token.user"];
          fcm_token?: parameters["rowFilter.fcm_token.fcm_token"];
          created_at?: parameters["rowFilter.fcm_token.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.fcm_token.id"];
          user?: parameters["rowFilter.fcm_token.user"];
          fcm_token?: parameters["rowFilter.fcm_token.fcm_token"];
          created_at?: parameters["rowFilter.fcm_token.created_at"];
        };
        body: {
          /** fcm_token */
          fcm_token?: definitions["fcm_token"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rooms": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.rooms.id"];
          uuid?: parameters["rowFilter.rooms.uuid"];
          expireDate?: parameters["rowFilter.rooms.expireDate"];
          created_at?: parameters["rowFilter.rooms.created_at"];
          name?: parameters["rowFilter.rooms.name"];
          published?: parameters["rowFilter.rooms.published"];
          category?: parameters["rowFilter.rooms.category"];
          description?: parameters["rowFilter.rooms.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["rooms"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** rooms */
          rooms?: definitions["rooms"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.rooms.id"];
          uuid?: parameters["rowFilter.rooms.uuid"];
          expireDate?: parameters["rowFilter.rooms.expireDate"];
          created_at?: parameters["rowFilter.rooms.created_at"];
          name?: parameters["rowFilter.rooms.name"];
          published?: parameters["rowFilter.rooms.published"];
          category?: parameters["rowFilter.rooms.category"];
          description?: parameters["rowFilter.rooms.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.rooms.id"];
          uuid?: parameters["rowFilter.rooms.uuid"];
          expireDate?: parameters["rowFilter.rooms.expireDate"];
          created_at?: parameters["rowFilter.rooms.created_at"];
          name?: parameters["rowFilter.rooms.name"];
          published?: parameters["rowFilter.rooms.published"];
          category?: parameters["rowFilter.rooms.category"];
          description?: parameters["rowFilter.rooms.description"];
        };
        body: {
          /** rooms */
          rooms?: definitions["rooms"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/room_partipications": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room_partipications.id"];
          room?: parameters["rowFilter.room_partipications.room"];
          user?: parameters["rowFilter.room_partipications.user"];
          created_at?: parameters["rowFilter.room_partipications.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["room_partipications"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** room_partipications */
          room_partipications?: definitions["room_partipications"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room_partipications.id"];
          room?: parameters["rowFilter.room_partipications.room"];
          user?: parameters["rowFilter.room_partipications.user"];
          created_at?: parameters["rowFilter.room_partipications.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room_partipications.id"];
          room?: parameters["rowFilter.room_partipications.room"];
          user?: parameters["rowFilter.room_partipications.user"];
          created_at?: parameters["rowFilter.room_partipications.created_at"];
        };
        body: {
          /** room_partipications */
          room_partipications?: definitions["room_partipications"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          avatar?: parameters["rowFilter.users.avatar"];
          blockIncomingCalls?: parameters["rowFilter.users.blockIncomingCalls"];
          biography?: parameters["rowFilter.users.biography"];
          birthday?: parameters["rowFilter.users.birthday"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          avatar?: parameters["rowFilter.users.avatar"];
          blockIncomingCalls?: parameters["rowFilter.users.blockIncomingCalls"];
          biography?: parameters["rowFilter.users.biography"];
          birthday?: parameters["rowFilter.users.birthday"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          avatar?: parameters["rowFilter.users.avatar"];
          blockIncomingCalls?: parameters["rowFilter.users.blockIncomingCalls"];
          biography?: parameters["rowFilter.users.biography"];
          birthday?: parameters["rowFilter.users.birthday"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/categories": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.categories.id"];
          name?: parameters["rowFilter.categories.name"];
          description?: parameters["rowFilter.categories.description"];
          avatar?: parameters["rowFilter.categories.avatar"];
          created_at?: parameters["rowFilter.categories.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["categories"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** categories */
          categories?: definitions["categories"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.categories.id"];
          name?: parameters["rowFilter.categories.name"];
          description?: parameters["rowFilter.categories.description"];
          avatar?: parameters["rowFilter.categories.avatar"];
          created_at?: parameters["rowFilter.categories.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.categories.id"];
          name?: parameters["rowFilter.categories.name"];
          description?: parameters["rowFilter.categories.description"];
          avatar?: parameters["rowFilter.categories.avatar"];
          created_at?: parameters["rowFilter.categories.created_at"];
        };
        body: {
          /** categories */
          categories?: definitions["categories"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/user_followers_count": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  followers: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    actor?: string;
  };
  get_messages_room: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: number;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: text */
    text?: string;
    /** Format: boolean */
    seen?: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    receiver?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `rooms.id`.<fk table='rooms' column='id'/>
     */
    room?: number;
    /** Format: boolean */
    group_message?: boolean;
  };
  pool: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    paired_with?: string;
  };
  messages: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    text?: string;
    /**
     * Format: boolean
     * @default false
     */
    seen: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    receiver?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `rooms.id`.<fk table='rooms' column='id'/>
     */
    room: number;
    /**
     * Format: boolean
     * @default false
     */
    group_message?: boolean;
  };
  /** @description Firebase messaging token */
  fcm_token: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user: string;
    /** Format: character varying */
    fcm_token: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  rooms: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: uuid
     * @default extensions.uuid_generate_v4()
     */
    uuid: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    expireDate: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    name?: string;
    /**
     * Format: boolean
     * @default false
     */
    published: boolean;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `categories.id`.<fk table='categories' column='id'/>
     */
    category?: number;
    /** Format: character varying */
    description?: string;
  };
  room_partipications: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `rooms.id`.<fk table='rooms' column='id'/>
     */
    room: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: character varying */
    username: string;
    /** Format: character varying */
    avatar?: string;
    /**
     * Format: boolean
     * @default false
     */
    blockIncomingCalls?: boolean;
    /** Format: character varying */
    biography?: string;
    /** Format: date */
    birthday?: string;
  };
  categories: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: character varying */
    name: string;
    /** Format: character varying */
    description: string;
    /** Format: character varying */
    avatar?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description followers */
  "body.followers": definitions["followers"];
  /** Format: bigint */
  "rowFilter.followers.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.followers.created_at": string;
  /** Format: uuid */
  "rowFilter.followers.user": string;
  /** Format: uuid */
  "rowFilter.followers.actor": string;
  /** @description get_messages_room */
  "body.get_messages_room": definitions["get_messages_room"];
  /** Format: bigint */
  "rowFilter.get_messages_room.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.get_messages_room.created_at": string;
  /** Format: text */
  "rowFilter.get_messages_room.text": string;
  /** Format: boolean */
  "rowFilter.get_messages_room.seen": string;
  /** Format: uuid */
  "rowFilter.get_messages_room.user": string;
  /** Format: uuid */
  "rowFilter.get_messages_room.receiver": string;
  /** Format: bigint */
  "rowFilter.get_messages_room.room": string;
  /** Format: boolean */
  "rowFilter.get_messages_room.group_message": string;
  /** @description pool */
  "body.pool": definitions["pool"];
  /** Format: bigint */
  "rowFilter.pool.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.pool.created_at": string;
  /** Format: uuid */
  "rowFilter.pool.user": string;
  /** Format: uuid */
  "rowFilter.pool.paired_with": string;
  /** @description messages */
  "body.messages": definitions["messages"];
  /** Format: bigint */
  "rowFilter.messages.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.messages.created_at": string;
  /** Format: text */
  "rowFilter.messages.text": string;
  /** Format: boolean */
  "rowFilter.messages.seen": string;
  /** Format: uuid */
  "rowFilter.messages.user": string;
  /** Format: uuid */
  "rowFilter.messages.receiver": string;
  /** Format: bigint */
  "rowFilter.messages.room": string;
  /** Format: boolean */
  "rowFilter.messages.group_message": string;
  /** @description fcm_token */
  "body.fcm_token": definitions["fcm_token"];
  /** Format: bigint */
  "rowFilter.fcm_token.id": string;
  /** Format: uuid */
  "rowFilter.fcm_token.user": string;
  /** Format: character varying */
  "rowFilter.fcm_token.fcm_token": string;
  /** Format: timestamp with time zone */
  "rowFilter.fcm_token.created_at": string;
  /** @description rooms */
  "body.rooms": definitions["rooms"];
  /** Format: bigint */
  "rowFilter.rooms.id": string;
  /** Format: uuid */
  "rowFilter.rooms.uuid": string;
  /** Format: timestamp with time zone */
  "rowFilter.rooms.expireDate": string;
  /** Format: timestamp with time zone */
  "rowFilter.rooms.created_at": string;
  /** Format: character varying */
  "rowFilter.rooms.name": string;
  /** Format: boolean */
  "rowFilter.rooms.published": string;
  /** Format: bigint */
  "rowFilter.rooms.category": string;
  /** Format: character varying */
  "rowFilter.rooms.description": string;
  /** @description room_partipications */
  "body.room_partipications": definitions["room_partipications"];
  /** Format: bigint */
  "rowFilter.room_partipications.id": string;
  /** Format: bigint */
  "rowFilter.room_partipications.room": string;
  /** Format: uuid */
  "rowFilter.room_partipications.user": string;
  /** Format: timestamp with time zone */
  "rowFilter.room_partipications.created_at": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: character varying */
  "rowFilter.users.username": string;
  /** Format: character varying */
  "rowFilter.users.avatar": string;
  /** Format: boolean */
  "rowFilter.users.blockIncomingCalls": string;
  /** Format: character varying */
  "rowFilter.users.biography": string;
  /** Format: date */
  "rowFilter.users.birthday": string;
  /** @description categories */
  "body.categories": definitions["categories"];
  /** Format: bigint */
  "rowFilter.categories.id": string;
  /** Format: character varying */
  "rowFilter.categories.name": string;
  /** Format: character varying */
  "rowFilter.categories.description": string;
  /** Format: character varying */
  "rowFilter.categories.avatar": string;
  /** Format: timestamp with time zone */
  "rowFilter.categories.created_at": string;
}

export interface operations {}

export interface external {}
