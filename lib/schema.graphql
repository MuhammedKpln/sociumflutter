type Category {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  description: String
  image: String
}

# A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
scalar DateTime

type Follower {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  user: User!
  actor: User!
  userId: Float
  actorId: Float
  isFollowing: Boolean
}

type UserLike {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  post: PostEntity
  comment: Comment
  postLike: PostLike
  liked: Boolean!
}

type ICount {
  comment: Float!
}

type PostEntity {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  additional: String
  content: String!
  user: User!
  cursor: Float!
  type: Float!
  slug: String!
  comments: [Comment!]!
  userLike: UserLike
  postLike: PostLike!
  _count: ICount!
  postFromFollowers: Boolean
  category: Category!
  isFollowed: Follower
}

type PostLike {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  likeCount: Float!
  post: PostEntity!
  commment: Comment!
  userLike: UserLike
}

type Comment {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  content: String!
  user: User!
  post: PostEntity!
  parentUser: User
  postLike: PostLike!
  userLike: UserLike
  parentComments: [Comment!]
}

type IUserCountMap {
  posts: Float!
  followers: Float!
  followings: Float!
}

type User {
  id: Float!
  username: String!
  email: String!
  avatar: String
  blockIncomingCalls: Boolean
  gender: Float
  bio: String
  isEmailConfirmed: Boolean!
  created_at: DateTime!
  birthday: DateTime
  updated_at: DateTime!
  _count: IUserCountMap!
  userParentComments: [Comment!]
}

type LoginResponse {
  access_token: String!
  refresh_token: String!
  user: User!
  expire_date: DateTime!
}

type RegisterResponse {
  access_token: String!
  refresh_token: String!
  user: User!
  expire_date: DateTime!
}

type LoginUserGoogleResponse {
  access_token: String!
  refresh_token: String!
  user: User!
  expire_date: DateTime!
}

type Notification {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  user: User!
  actor: User!
  notificationType: Float!
  entityId: Float!
  entityType: String!
  readed: Boolean!
  entity: entity!
}

union entity = PostEntity | Follower

type NotificationSettingsEntity {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  follower: Boolean!
  messageRequest: Boolean!
  comments: Boolean!
  disableAll: Boolean!
  user: User!
}

type MessageRequest {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  requestFrom: User!
  requestTo: User!
  request: Boolean!
}

type Room {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  roomAdress: String!
  expireDate: DateTime!
  messages: [Messages!]!
}

type Messages {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  room: Room!
  sender: User!
  receiver: User!
  repliedToMessage: Messages
  message: String!
  seen: Boolean!
}

type Attachments {
  media_keys: [String!]!
}

type Datum {
  text: String!
  author_id: String!
  id: String!
  attachments: Attachments!
}

type Medium {
  media_key: String!
  type: String!
  url: String!
}

type TwitterUser {
  profile_image_url: String!
  id: String!
  created_at: DateTime!
  username: String!
  name: String!
}

type Includes {
  users: [TwitterUser!]!
  media: [Medium!]!
}

type TwitterPost {
  data: [Datum!]!
  includes: Includes!
}

type Star {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  starCount: Float!
  user: User!
}

type SpotifyCurrentlyListening {
  id: Float!
  created_at: DateTime!
  updated_at: DateTime!
  songName: String!
  artistName: String!
  image: String!
  user: User!
}

type Query {
  checkIfUserIsRegistered(email: String!): Boolean!
  getUser(username: String!): User!
  getUserStars: Star!
  userLikedPosts: [UserLike!]!
  posts(pagination: PaginationParams!, categoryId: Float): [PostEntity!]!
  post(id: Float!): PostEntity!
  getLikedPosts: [PostEntity!]!
  userPosts(username: String!): [PostEntity!]!
  mostLikedPosts(pagination: PaginationParams!): [PostEntity!]!
  getTwitterPost(twitterId: String!): TwitterPost!
  userFollowsActor(actorId: Float!, userId: Float!): Boolean!
  getUserFollowers(pagination: PaginationParams!, userId: Float!): [Follower!]!
  getUserFollowings(pagination: PaginationParams!, userId: Float!): [Follower!]!
  shouldFollowThoseUsers: [User!]!
  getNotifications: [Notification!]!
  getReadedNotifications: [Notification!]!
  notificationSettings: NotificationSettingsEntity!
  getPostComments(pagination: PaginationParams!, postId: Float!): [Comment!]!
  getUserComments(pagination: PaginationParams, userId: Float!): [Comment!]!
  messageRequests(pagination: PaginationParams!): [MessageRequest!]!
  tess(pagination: PaginationParams!): Boolean!
  messageRequestsSended(pagination: PaginationParams!): [MessageRequest!]!
  checkForRequests(toUserId: Float!): MessageRequest
  messages(pagination: PaginationParams!): [Messages!]!
  messagesFromRoom(pagination: PaginationParams!, roomId: Float!): [Messages!]!
  getUserCurrentTrack(userId: Float!): SpotifyCurrentlyListening
  categories: [Category!]!
  category(id: Float!): Category!
}

input PaginationParams {
  offset: Float!
  limit: Float!
}

type Mutation {
  login(data: LoginUserDto!): LoginResponse!
  loginGoogle(data: LoginUserGoogleDto!): LoginUserGoogleResponse!
  register(data: CreateUserDto!): RegisterResponse!
  registerWithGoogle(data: CreateUserGoogleDto!): LoginResponse!
  confirmEmail(data: VerifyEmailDto!): Boolean!
  resendConfirmMail: Boolean!
  sendForgotPasswordCode(email: String!): Boolean!
  changePassword(data: ForgotPasswordDto!): Boolean!
  refreshToken(userId: Float!, refreshToken: String!): LoginResponse!
  editProfile(profile: EditProfileDto!): User!
  addNewStar: Star!
  deleteStar: Boolean!
  updateUserAgeAndGender(data: UpdateUserAgeAndGenderDto!): User!
  removePost(postId: Float!): Boolean!
  createPost(post: CreatePostDto!): PostEntity!
  followUser(actorId: Float!): Follower!
  unfollowUser(actorId: Float!): Boolean!
  markNotificationAsRead(id: Float!): Boolean!
  markAllNotificationAsRead: Boolean!
  saveUserFcmToken(fcmToken: String!): Boolean!
  editNotificationSettings(settings: EditNotificationSettingsDto!): Boolean!
  newComment(
    data: CreteNewCommentDto!
    parentId: Float
    postId: Float
  ): Comment!
  removeComment(commentId: Float!): Boolean!
  likeEntry(data: CreateUserLikeDto!): PostLike!
  unlikeEntry(data: CreateUserLikeDto!): PostLike!
  newMessageRequest(toUserId: Float!): Boolean!
  acceptRequest(receiverId: Float!, id: Float!): MessageRequest!
  rejectRequest(id: Float!): Boolean!
  markAllMessagesRead(roomId: Float!): Boolean!
  retrieveMessageRequest(requestId: Float!): Boolean!
  rateUser(rate: RateUserDto!): Boolean!
  deleteRoom(roomId: Float!): Room!
  updateCurrentTrack(data: UpdateCurrentTrackDto!): Boolean!
  removeCurrentTrack: Boolean!
}

input LoginUserDto {
  email: String!
  password: String!
}

input LoginUserGoogleDto {
  email: String!
  idToken: String!
}

input CreateUserDto {
  username: String!
  password: String!
  password_confirmation: String!
  email: String!
}

input CreateUserGoogleDto {
  username: String!
  email: String!
  idToken: String!
}

input VerifyEmailDto {
  email: String!
  verificationCode: Float!
}

input ForgotPasswordDto {
  password: String!
  email: String!
  forgotPasswordCode: Float!
}

input EditProfileDto {
  avatar: String
  bio: String
  username: String
  blockIncomingCalls: Boolean
  birthday: DateTime
}

input UpdateUserAgeAndGenderDto {
  birthday: DateTime!
  gender: Float!
}

input CreatePostDto {
  additional: String
  content: String!
  categoryId: Float!
  type: Float!
}

input EditNotificationSettingsDto {
  follower: Boolean
  messageRequest: Boolean
  comments: Boolean
  disableAll: Boolean
}

input CreteNewCommentDto {
  content: String!
}

input CreateUserLikeDto {
  post: Float
  comment: Float
}

input RateUserDto {
  rating: Float!
  userId: Float!
}

input UpdateCurrentTrackDto {
  songName: String!
  artistName: String!
  imageUrl: String!
}

type Subscription {
  createdNewPost: PostEntity!
  messageSended(userId: Float!): Messages!
  syncWithUserListeningTrack(userId: Float!): SpotifyCurrentlyListening!
}
